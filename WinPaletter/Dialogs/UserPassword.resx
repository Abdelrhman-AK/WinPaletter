<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="button1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAGOSURBVDhPtdPfK0NhHAbwNxFlQ3ExbTnJsvkRMX+R/0ApCldGmatdsFgL66yMi01qbsYNZn60
        HePMkcWoTcs4SEkcX+/ZeTsnrxgXnvrcvO/znDqnDvqX2E7zVltSHOk+EVlZV1Ic7hEeLeT6+1iEG30n
        l2cxCQOKfOaVO6T+ObaDu+q23RyHQRFxc/S2isy0WDYzfstmFn7JR2ZKzOHL1qb1q3cMaH17aWgPn9Pn
        UuNGRvsmTCg9xIQuQLVyCkxQsZrOw2H+CTrWUto91hC6GCBzhIyB1LwxmIKC5SQ8v0pAZ+f6AZiAoHQw
        U+DMQ+YIGZYFj2FJgAJfAl7evj4gkr0H0+Kx0sHq/YKbzBGqZfnBOpYH1QKnCp7lIJIRgWET2r3Mx/eT
        OX6A+6ilxpOQMKD1rvFgnIvT55J+lmsmcyX66diCzhWD36h0xbT3VzPF68qd+/EK5z78BHdicpesqExs
        6cscu2ypIyphQJHKJqNeuUPaP2Q8YkVjkZES+/aMDNm3h9HoVvGf6e9B6AM4fqjv9F0jsgAAAABJRU5E
        rkJggg==
</value>
  </data>
  <data name="button3.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAIySURBVDhPzZLLbxJRGMUnsX+IaS0aCWkRlARQNDE+Vj4aF8a4UBdqNDHRhUlXxpXGGjdaDXHp
        I2IXGquitMKAMMwAU95Mh4EBhuFlofUPsMc7wzSmSeNWT3I3957f/b7z3Uv9fwIwwkqtU3f5Ff/FWL9y
        Idqv3OF6nxNl9QQ522bYtlZNUabCkqoeoQeYDAww8aUPy6cVmOd/4KC/C1psK8Rz2rBvVrXWmBbrKo6G
        B3AsruIss4Y9z2OY8H7H7vdd7HrXw/75LjSPLNdvG9hQ2aJ4WK4r695cV698jsCNTg8ejwdutxu28zdg
        mutg/G0HT5MqasSbF6RDBk5RhdLyV7KJW1xPb3vSG4HL5YLT6YTD4YDNZsPOR0GMvWnj+rcW6o0mCoLo
        N3DSQaG0RiLgZrynZ7bMhmC323XQarXCYrFgx0wAo69buLZAIhBvviisGjhFpbK5n+WKjGfpjj4wLbP5
        zGUdNJvNMJ28hNFXKra/UPGYbUKq1rCUzf+5IMIm/aXlMkqyok9bG5hpro3xhwsYe0AqG/A+XxNCVYEg
        SmAS/EcDpyg6yh1IprPry+UKQkITrg/DgWmZtbY1eC+BaXImSlXwmdyvYDzuNvChQgw7ncrk9NsLUh2z
        CRVXF1VcCah4Qtoukj2tAJ/Ng46ym59xQ+FofIpNLcmZfBFaJA3QVolcSgYNjk9XaYbb+iNtKBgMjoSY
        xPEIk7jPcPxLbUXZxL1gjDvm8/n+/pX/gSjqN9oxou/7me7DAAAAAElFTkSuQmCC
</value>
  </data>
  <data name="alertBox2.Text" xml:space="preserve">
    <value>- This function is used to open a user profile in memory, modify it, and apply a theme to it without having to open WinPaletter in another profile.
- If you continue without a password, WinPaletter will read and write registry values for the other user correctly without opening their profile. However, WinPaletter will not be able to read and write other aspects that do not depend on the registry but rely on calling functions in system DLL files correctly.
- For example, WinPaletter calls the 'SystemParameterInfo' function inside User32.dll to read and write Windows settings and applies them instantly without using the registry and without requiring an Explorer restart. When you continue without a password, these functions will target the user who opened the WinPaletter executable file, but not the selected user inside WinPaletter.</value>
  </data>
</root>