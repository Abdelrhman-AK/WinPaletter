<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="button1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAY5JREFUOE+1
        098rQ2EcBvA3EWVDcTFtOcmy+RExf5H/QCkKV0aZq12wWAvrrIyLTWpuxg1mfrQd48yRxahNyzhISRxf
        79l5OyevGBee+ty87/OcOqcO+pfYTvNWW1Ic6T4RWVlXUhzuER4t5Pr7WIQbfSeXZzEJA4p85pU7pP45
        toO76rbdHIdBEXFz9LaKzLRYNjN+y2YWfslHZkrM4cvWpvWrdwxofXtpaA+f0+dS40ZG+yZMKD3EhC5A
        tXIKTFCxms7DYf4JOtZS2j3WELoYIHOEjIHUvDGYgoLlJDy/SkBn5/oBmICgdDBT4MxD5ggZlgWPYUmA
        Al8CXt6+PiCSvQfT4rHSwer9gpvMEapl+cE6lgfVAqcKnuUgkhGBYRPavczH95M5foD7qKXGk5AwoPWu
        8WCci9Pnkn6WayZzJfrp2ILOFYPfqHTFtPdXM8Xryp378QrnPvwEd2Jyl6yoTGzpyxy7bKkjKmFAkcom
        o165Q9o/ZDxiRWORkRL79owM2beH0ehW8Z/p70HoAzh+qO/0XSOyAAAAAElFTkSuQmCC
</value>
  </data>
  <data name="button3.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAjJJREFUOE/N
        kstvElEYxSexf4hpLRoJaRGUBFA0MT5WPhoXxrhQF2o0MdGFSVfGlcYaN1oNcekjYhcaq6K0woAwzABT
        3kyHgQGG4WWh9Q+wxzvDNKZJ41ZPcjf3nt/9vvPdS/1/AjDCSq1Td/kV/8VYv3Ih2q/c4XqfE2X1BDnb
        Zti2Vk1RpsKSqh6hB5gMDDDxpQ/LpxWY53/goL8LWmwrxHPasG9WtdaYFusqjoYHcCyu4iyzhj3PY5jw
        fsfu913setfD/vkuNI8s128b2FDZonhYrivr3lxXr3yOwI1ODx6PB263G7bzN2Ca62D8bQdPkypqxJsX
        pEMGTlGF0vJXsolbXE9ve9IbgcvlgtPphMPhgM1mw85HQYy9aeP6txbqjSYKgug3cNJBobRGIuBmvKdn
        tsyGYLfbddBqtcJisWDHTACjr1u4tkAiEG++KKwaOEWlsrmf5YqMZ+mOPjAts/nMZR00m80wnbyE0Vcq
        tr9Q8ZhtQqrWsJTN/7kgwib9peUySrKiT1sbmGmujfGHCxh7QCob8D5fE0JVgSBKYBL8RwOnKDrKHUim
        s+vL5QpCQhOuD8OBaZm1tjV4L4FpciZKVfCZ3K9gPO428KFCDDudyuT02wtSHbMJFVcXVVwJqHhC2i6S
        Pa0An82DjrKbn3FD4Wh8ik0tyZl8EVokDdBWiVxKBg2OT1dphtv6I20oGAyOhJjE8QiTuM9w/EttRdnE
        vWCMO+bz+f7+lf+BKOo32jGi7/uZ7sMAAAAASUVORK5CYII=
</value>
  </data>
  <data name="alertBox2.Text" xml:space="preserve">
    <value>- This function is used to open a user profile in memory, modify it, and apply a theme to it without having to open WinPaletter in another profile.
- If you continue without a password, WinPaletter will read and write registry values for the other user correctly without opening their profile. However, WinPaletter will not be able to read and write other aspects that do not depend on the registry but rely on calling functions in system DLL files correctly.
- For example, WinPaletter calls the 'SystemParameterInfo' function inside User32.dll to read and write Windows settings and applies them instantly without using the registry and without requiring an Explorer restart. When you continue without a password, these functions will target the user who opened the WinPaletter executable file, but not the selected user inside WinPaletter.</value>
  </data>
</root>